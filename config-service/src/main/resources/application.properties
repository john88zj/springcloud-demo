spring.application.name=config-center
server.port=8890

info.id=${spring.applicaiton.name}
info.name=Config-Center
#config配置中心,其他微服务通过配置中心读取参数
info.description=\u0063\u006f\u006e\u0066\u0069\u0067\u914d\u7f6e\u4e2d\u5fc3\u002c\u5176\u4ed6\u5fae\u670d\u52a1\u901a\u8fc7\u914d\u7f6e\u4e2d\u5fc3\u8bfb\u53d6\u53c2\u6570
info.version=1.0.0

spring.info.build.encoding=utf-8

##编码格式
#spring.http.encoding.force=true
#spring.http.encoding.charset=UTF-8
#spring.http.encoding.enabled=true
#server.tomcat.uri-encoding=UTF-8

# 注册到Admin
spring.boot.admin.client.url=http://localhost:8769

# 注册中心注册
eureka.client.registryFetchIntervalSeconds=5
eureka.client.service-url.defaultZone=${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/
eureka.instance.leaseRenewalIntervalInSeconds=10

# 健康检查路径
eureka.instance.health-check-url-path=/actuator/health


management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=ALWAYS




#1、config 默认Git加载
spring.cloud.config.server.git.uri=https://github.com/john88zj/springcloud-demo
#github账户
spring.cloud.config.server.git.username=john88zj@163.com
#github密码
spring.cloud.config.server.git.password=ZHujun123_github
spring.cloud.config.server.git.default-label=master
spring.cloud.config.server.git.search-paths=config

###2、加载本地开发环境
#spring.profiles.active=native
#spring.cloud.config.server.native.searchLocations=classpath:/config

##3、加载 本地物理环境
#spring.profiles.active=native
##本地文件路径
#spring.cloud.config.server.native.searchLocations= file:///Users/zhujun/Documents/workspace-my/springcloud-demo1/config/master

##4、加载svn环境  http://localhost:8080/{application}/{profile}/{label}，比如：http://localhost:8080/dmeo/development/trunk
#### config server svn
#spring.cloud.config.server.svn.uri=http://localhost:8080/dmeo/development/trunk
#spring.cloud.config.server.svn.username=xxx
#spring.cloud.config.server.svn.password=xxx
#spring.profiles.active=subversion
#
#PS:  svn 环境 需要 引入 SVN jar包 
#<groupId>org.tmatesoft.svnkit</groupId>
#<artifactId>svnkit</artifactId>

#/{application}/{profile}[/{label}]
#/{application}-{profile}.yml
#/{label}/{application}-{profile}.yml
#/{application}-{profile}.properties
#/{label}/{application}-{profile}.properties
#{application} 就是应用名称，对应到配置文件上来，就是配置文件的名称部分，例如我上面创建的配置文件。
#
#{profile} 就是配置文件的版本，我们的项目有开发版本、测试环境版本、生产环境版本，对应到配置文件上来就是以 application-{profile}.yml 加以区分，例如application-dev.yml、application-sit.yml、application-prod.yml。
#
#{label} 表示 git 分支，默认是 master 分支，如果项目是以分支做区分也是可以的，那就可以通过不同的 label 来控制访问不同的配置文件了。
#上面的 5 条规则中，我们只看前三条，因为我这里的配置文件都是 yml 格式的。根据这三条规则，我们可以通过以下地址查看配置文件内容:
#
#http://localhost:8888/config-client/dev/master
#
#http://localhost:8888/config-client/dev
#
#http://localhost:8888/config-single-client-dev.yml
#
#http://localhost:8888/config-single-client-prod.yml
#
#http://localhost:8888/master/config-single-client-prod.yml
#
#通过访问以上地址，如果可以正常返回数据，则说明配置中心服务端一切正常。
